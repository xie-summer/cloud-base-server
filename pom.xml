<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.xie-summer</groupId>
	<artifactId>spring-cloud</artifactId>
	<packaging>pom</packaging>
	<version>1.0-SNAPSHOT</version>

	<modules>
		<module>./spring-cloud-test</module>
		<module>./spring-cloud-base-servers</module>
		<module>./spring-cloud-template</module>
		<module>./spring-cloud-visual</module>
		<module>./spring-cloud-modules</module>

	</modules>
	<properties>
		<dependency.container>provided</dependency.container>
		<dependency.common>provided</dependency.common>
		<spring-boot.version>1.5.9.RELEASE</spring-boot.version>
		<java.version>1.8</java.version>
		<encoding.version>UTF-8</encoding.version>
		<spring.boot.version>1.5.9.RELEASE</spring.boot.version>
		<spring-cloud-dependencies.version>Edgware.RELEASE</spring-cloud-dependencies.version>

		<!--docker config-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<docker.repostory>59jybekz.mirror.aliyuncs.com</docker.repostory>
		<docker.registry.name>cloud</docker.registry.name>

	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud-dependencies.version}</version> <!--此处不能使用SR3,会出现jar版本异常 -->
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.retry</groupId>
				<artifactId>spring-retry</artifactId>
				<version>1.2.0.RELEASE</version>
			</dependency>
			<dependency>
				<groupId>com.github.axet</groupId>
				<artifactId>kaptcha</artifactId>
				<version>0.0.9</version>
			</dependency>
			<dependency>
				<groupId>com.xiaoleilu</groupId>
				<artifactId>hutool-all</artifactId>
				<version>3.2.0</version>
			</dependency>
			<dependency>
				<groupId>com.luhuiguo</groupId>
				<artifactId>fastdfs-spring-boot-starter</artifactId>
				<version>0.2.0</version>
			</dependency>
			<dependency>
				<groupId>com.github.ulisesbocchio</groupId>
				<artifactId>jasypt-spring-boot-starter</artifactId>
				<version>1.16</version>
			</dependency>
			<dependency>
				<groupId>net.logstash.logback</groupId>
				<artifactId>logstash-logback-encoder</artifactId>
				<version>4.6</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>3.2.8</version>
			</dependency>
			<dependency>
				<groupId>tk.mybatis</groupId>
				<artifactId>mapper</artifactId>
				<version>3.5.3</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>1.3.0</version>
			</dependency>
			<dependency>
				<groupId>io.jsonwebtoken</groupId>
				<artifactId>jjwt</artifactId>
				<version>0.6.0</version>
			</dependency>
			<dependency>
				<groupId>com.github.pagehelper</groupId>
				<artifactId>pagehelper</artifactId>
				<version>4.1.6</version>
			</dependency>
			<dependency>
				<groupId>org.jsoup</groupId>
				<artifactId>jsoup</artifactId>
				<version>1.9.2</version>
			</dependency>
			<dependency>
				<groupId>com.caucho</groupId>
				<artifactId>hessian</artifactId>
				<version>4.0.38</version>
			</dependency>
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>2.6</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>3.4</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.4</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>1.2.29</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid-spring-boot-starter</artifactId>
				<version>1.1.0</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>1.1.5</version>
			</dependency>
			<dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache-core</artifactId>
				<version>2.6.9</version>
				<scope>${dependency.common}</scope>
			</dependency>
			<dependency>
				<groupId>net.spy</groupId>
				<artifactId>spymemcached</artifactId>
				<version>2.11.7</version>
				<scope>${dependency.common}</scope>
			</dependency>
			<!-- swagger2 -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>2.7.0</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>2.7.0</version>
			</dependency>
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
				<version>2.3.0</version>
			</dependency>
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz-jobs</artifactId>
				<version>2.3.0</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5</version>
			</dependency>


			<!--异步httpclient start-->
			<dependency>
				<groupId>org.asynchttpclient</groupId>
				<artifactId>async-http-client</artifactId>
				<version>2.0.24</version>
			</dependency>
			<dependency>
				<groupId>com.ning</groupId>
				<artifactId>async-http-client</artifactId>
				<version>1.8.14</version>
				<exclusions>
					<exclusion>
						<groupId>io.netty</groupId>
						<artifactId>netty</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>io.netty</groupId>
				<artifactId>netty</artifactId>
				<version>3.9.5.Final</version>
			</dependency>
			<!--异步httpclient end-->
			<!-- 热部署 -->
			<!-- devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现） -->
			<!-- 实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。 -->
			<!-- 即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的 -->

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-devtools</artifactId>
				<version>${spring.boot.version}</version>
				<!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖boot项目的项目如果想要使用devtools，需要重新引入 -->
				<optional>true</optional>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<finalName>${project.artifactId}</finalName>
		<resources><!-- 使用@@站位符，输出Dockerfile至docker文件夹 -->
			<resource>
				<directory>src/main/docker</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/Dockerfile</include>
				</includes>
				<targetPath>../docker</targetPath>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.boot.version}</version>
					<configuration>
						<fork>true</fork>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.12</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${docker.registry.name}/${project.artifactId}:${project.version}</image>
                            <newName>
                                ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </newName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>
                                ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </imageName>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                    <serverId>docker-aliyun</serverId>
                    <registryUrl>http://59jybekz.mirror.aliyuncs.com</registryUrl>
                    <!-- <forceTags>true</forceTags> -->
                    <!--install阶段也上传，否则只有deploy阶段上传-->
                    <pushImage>true</pushImage>
                    <dockerDirectory>target/docker</dockerDirectory>
                    <imageName>
                        ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                    </imageName>
                    <imageTags>
                        <!--docker的tag为项目版本号、latest-->
                        <!--<imageTag>${git.commit.id.abbrev}</imageTag>-->
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <resources>
                        <rescource><!-- 将打包文件放入dockerDirectory指定的位置 -->
                            <targetPath>../docker</targetPath>
                            <filtering>true</filtering>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </rescource>
                        <!-- 输出Dockerfile至docker文件夹,如果不使用占位符,可使用以下配置 -->
                        <resource>
                            <directory>src/main/docker</directory>
                            <filtering>true</filtering>
                            <includes>
                                <include>**/Dockerfile</include>
                            </includes>
                            <targetPath>../docker</targetPath>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <compilerArgument>-proc:none</compilerArgument>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>
        </plugins>
    </build>
    <!-- 使用aliyun镜像 -->
    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
    </repositories>
</project>